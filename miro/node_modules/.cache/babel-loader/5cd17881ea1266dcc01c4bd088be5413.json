{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nvar Particle_1 = require(\"./Particle\");\n\nvar Utils_1 = require(\"../Utils\");\n\nvar InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nvar Particles = /*#__PURE__*/function () {\n  function Particles(container) {\n    _classCallCheck(this, Particles);\n\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.limit = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    var canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  _createClass(Particles, [{\n    key: \"init\",\n    value: function init() {\n      var container = this.container;\n      var options = container.actualOptions;\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(options.manualParticles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var particle = _step.value;\n          var pos = particle.position ? {\n            x: particle.position.x * container.canvas.size.width / 100,\n            y: particle.position.y * container.canvas.size.height / 100\n          } : undefined;\n          this.addParticle(pos, particle.options);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(container.plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              plugin = _step2$value[1];\n\n          if (plugin.particlesInitialization !== undefined) {\n            handled = plugin.particlesInitialization();\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (!handled) {\n        for (var i = this.count; i < options.particles.number.value; i++) {\n          this.addParticle();\n        }\n      }\n\n      if (options.infection.enable) {\n        for (var _i = 0; _i < options.infection.infections; _i++) {\n          var notInfected = this.array.filter(function (p) {\n            return p.infecter.infectionStage === undefined;\n          });\n          var infected = Utils_1.Utils.itemFromArray(notInfected);\n          infected.infecter.startInfection(0);\n        }\n      }\n\n      this.interactionManager.init();\n      container.pathGenerator.init();\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index, quantity) {\n      if (index >= 0 && index <= this.count) {\n        var _iterator3 = _createForOfIteratorHelper(this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var particle = _step3.value;\n            particle.destroy();\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(particle) {\n      this.removeAt(this.array.indexOf(particle));\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      var container = this.container;\n      var particlesToDelete = [];\n      container.pathGenerator.update();\n\n      var _iterator4 = _createForOfIteratorHelper(container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (plugin.update !== undefined) {\n            plugin.update(delta);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(this.array),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _particle = _step5.value;\n          var resizeFactor = this.container.canvas.resizeFactor;\n\n          if (resizeFactor) {\n            _particle.position.x *= resizeFactor.width;\n            _particle.position.y *= resizeFactor.height;\n          }\n\n          _particle.move(delta);\n\n          if (_particle.destroyed) {\n            particlesToDelete.push(_particle);\n            continue;\n          }\n\n          this.quadTree.insert(new Utils_1.Point(_particle.getPosition(), _particle));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      for (var _i2 = 0, _particlesToDelete = particlesToDelete; _i2 < _particlesToDelete.length; _i2++) {\n        var particle = _particlesToDelete[_i2];\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      var _iterator6 = _createForOfIteratorHelper(this.container.particles.array),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _particle2 = _step6.value;\n\n          _particle2.update(delta);\n\n          if (!_particle2.destroyed && !_particle2.spawning) {\n            this.interactionManager.particlesInteract(_particle2, delta);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      delete container.canvas.resizeFactor;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n      container.canvas.clear();\n      var canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      var _iterator7 = _createForOfIteratorHelper(container.plugins),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              plugin = _step7$value[1];\n\n          container.canvas.drawPlugin(plugin, delta);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var _iterator8 = _createForOfIteratorHelper(this.array),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var p = _step8.value;\n          p.draw(delta);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.array = [];\n    }\n  }, {\n    key: \"push\",\n    value: function push(nb, mouse, overrideOptions) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var limit = options.particles.number.limit * container.density;\n      this.pushing = true;\n\n      if (limit > 0) {\n        var countToRemove = this.count + nb - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      for (var i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n      }\n\n      this.pushing = false;\n    }\n  }, {\n    key: \"addParticle\",\n    value: function addParticle(position, overrideOptions) {\n      try {\n        var particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n        this.array.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (_a) {\n        console.warn(\"error adding particle\");\n        return;\n      }\n    }\n  }, {\n    key: \"removeQuantity\",\n    value: function removeQuantity(quantity) {\n      this.removeAt(0, quantity);\n    }\n  }, {\n    key: \"getLinkFrequency\",\n    value: function getLinkFrequency(p1, p2) {\n      var key = \"\".concat(Math.min(p1.id, p2.id), \"_\").concat(Math.max(p1.id, p2.id));\n      var res = this.linksFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.linksFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getTriangleFrequency\",\n    value: function getTriangleFrequency(p1, p2, p3) {\n      var _ref = [p1.id, p2.id, p3.id],\n          id1 = _ref[0],\n          id2 = _ref[1],\n          id3 = _ref[2];\n\n      if (id1 > id2) {\n        var _ref2 = [id1, id2];\n        id2 = _ref2[0];\n        id1 = _ref2[1];\n      }\n\n      if (id2 > id3) {\n        var _ref3 = [id2, id3];\n        id3 = _ref3[0];\n        id2 = _ref3[1];\n      }\n\n      if (id1 > id3) {\n        var _ref4 = [id1, id3];\n        id3 = _ref4[0];\n        id1 = _ref4[1];\n      }\n\n      var key = \"\".concat(id1, \"_\").concat(id2, \"_\").concat(id3);\n      var res = this.trianglesFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.trianglesFreq.set(key, res);\n      }\n\n      return res;\n    }\n  }, {\n    key: \"setDensity\",\n    value: function setDensity() {\n      var options = this.container.actualOptions;\n      this.applyDensity(options.particles);\n    }\n  }, {\n    key: \"applyDensity\",\n    value: function applyDensity(options) {\n      var _a;\n\n      if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n        return;\n      }\n\n      var numberOptions = options.number;\n      var densityFactor = this.initDensityFactor(numberOptions.density);\n      var optParticlesNumber = numberOptions.value;\n      var optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n      var particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n      var particlesCount = this.count;\n      this.limit = numberOptions.limit * densityFactor;\n\n      if (particlesCount < particlesNumber) {\n        this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n      } else if (particlesCount > particlesNumber) {\n        this.removeQuantity(particlesCount - particlesNumber);\n      }\n    }\n  }, {\n    key: \"initDensityFactor\",\n    value: function initDensityFactor(densityOptions) {\n      var container = this.container;\n\n      if (!container.canvas.element || !densityOptions.enable) {\n        return 1;\n      }\n\n      var canvas = container.canvas.element;\n      var pxRatio = container.retina.pixelRatio;\n      return canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this.array.length;\n    }\n  }]);\n\n  return Particles;\n}();\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/tsparticles/dist/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","container","nextId","array","limit","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","options","actualOptions","handled","manualParticles","particle","pos","position","x","y","undefined","addParticle","plugins","plugin","particlesInitialization","i","count","particles","number","infection","enable","infections","notInfected","filter","p","infecter","infectionStage","infected","Utils","itemFromArray","startInfection","init","pathGenerator","clear","draw","factor","index","quantity","splice","destroy","removeAt","indexOf","delta","particlesToDelete","update","resizeFactor","move","destroyed","push","insert","Point","getPosition","remove","externalInteract","spawning","particlesInteract","drawPlugin","nb","mouse","overrideOptions","density","pushing","countToRemove","removeQuantity","Particle","_a","console","warn","p1","p2","key","Math","min","id","max","res","get","random","set","p3","id1","id2","id3","applyDensity","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","abs","densityOptions","element","pxRatio","retina","pixelRatio","area","length"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.limit = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.actualOptions;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.filter((p) => p.infecter.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.infecter.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.pathGenerator.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy();\n            }\n        }\n    }\n    remove(particle) {\n        this.removeAt(this.array.indexOf(particle));\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.pathGenerator.update();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.update !== undefined) {\n                plugin.update(delta);\n            }\n        }\n        for (const particle of this.array) {\n            const resizeFactor = this.container.canvas.resizeFactor;\n            if (resizeFactor) {\n                particle.position.x *= resizeFactor.width;\n                particle.position.y *= resizeFactor.height;\n            }\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n        delete container.canvas.resizeFactor;\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n            this.array.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (_a) {\n            console.warn(\"error adding particle\");\n            return;\n        }\n    }\n    removeQuantity(quantity) {\n        this.removeAt(0, quantity);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    setDensity() {\n        const options = this.container.actualOptions;\n        this.applyDensity(options.particles);\n    }\n    applyDensity(options) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n        const particlesCount = this.count;\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}