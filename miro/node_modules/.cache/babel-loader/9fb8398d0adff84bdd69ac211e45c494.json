{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\nvar plugins = [];\nvar presets = new Map();\nvar drawers = new Map();\nvar pathGenerators = new Map();\n\nvar Plugins = /*#__PURE__*/function () {\n  function Plugins() {\n    _classCallCheck(this, Plugins);\n  }\n\n  _createClass(Plugins, null, [{\n    key: \"getPlugin\",\n    value: function getPlugin(plugin) {\n      return plugins.find(function (t) {\n        return t.id === plugin;\n      });\n    }\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      if (!Plugins.getPlugin(plugin.id)) {\n        plugins.push(plugin);\n      }\n    }\n  }, {\n    key: \"getAvailablePlugins\",\n    value: function getAvailablePlugins(container) {\n      var res = new Map();\n\n      var _iterator = _createForOfIteratorHelper(plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var plugin = _step.value;\n\n          if (!plugin.needsPlugin(container.actualOptions)) {\n            continue;\n          }\n\n          res.set(plugin.id, plugin.getPlugin(container));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, sourceOptions) {\n      var _iterator2 = _createForOfIteratorHelper(plugins),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var plugin = _step2.value;\n          plugin.loadOptions(options, sourceOptions);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getPreset\",\n    value: function getPreset(preset) {\n      return presets.get(preset);\n    }\n  }, {\n    key: \"addPreset\",\n    value: function addPreset(presetKey, options) {\n      if (!Plugins.getPreset(presetKey)) {\n        presets.set(presetKey, options);\n      }\n    }\n  }, {\n    key: \"addShapeDrawer\",\n    value: function addShapeDrawer(type, drawer) {\n      if (!Plugins.getShapeDrawer(type)) {\n        drawers.set(type, drawer);\n      }\n    }\n  }, {\n    key: \"getShapeDrawer\",\n    value: function getShapeDrawer(type) {\n      return drawers.get(type);\n    }\n  }, {\n    key: \"getSupportedShapes\",\n    value: function getSupportedShapes() {\n      return drawers.keys();\n    }\n  }, {\n    key: \"getPathGenerator\",\n    value: function getPathGenerator(type) {\n      return pathGenerators.get(type);\n    }\n  }, {\n    key: \"addPathGenerator\",\n    value: function addPathGenerator(type, pathGenerator) {\n      if (!Plugins.getPathGenerator(type)) {\n        pathGenerators.set(type, pathGenerator);\n      }\n    }\n  }]);\n\n  return Plugins;\n}();\n\nexports.Plugins = Plugins;","map":{"version":3,"sources":["/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","plugins","presets","Map","drawers","pathGenerators","plugin","find","t","id","getPlugin","push","container","res","needsPlugin","actualOptions","set","options","sourceOptions","loadOptions","preset","get","presetKey","getPreset","type","drawer","getShapeDrawer","keys","pathGenerator","getPathGenerator"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,IAAMC,OAAO,GAAG,EAAhB;AACA,IAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACA,IAAMC,OAAO,GAAG,IAAID,GAAJ,EAAhB;AACA,IAAME,cAAc,GAAG,IAAIF,GAAJ,EAAvB;;IACMH,O;;;;;;;8BACeM,M,EAAQ;AACrB,aAAOL,OAAO,CAACM,IAAR,CAAa,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAF,KAASH,MAAhB;AAAA,OAAb,CAAP;AACH;;;8BACgBA,M,EAAQ;AACrB,UAAI,CAACN,OAAO,CAACU,SAAR,CAAkBJ,MAAM,CAACG,EAAzB,CAAL,EAAmC;AAC/BR,QAAAA,OAAO,CAACU,IAAR,CAAaL,MAAb;AACH;AACJ;;;wCAC0BM,S,EAAW;AAClC,UAAMC,GAAG,GAAG,IAAIV,GAAJ,EAAZ;;AADkC,iDAEbF,OAFa;AAAA;;AAAA;AAElC,4DAA8B;AAAA,cAAnBK,MAAmB;;AAC1B,cAAI,CAACA,MAAM,CAACQ,WAAP,CAAmBF,SAAS,CAACG,aAA7B,CAAL,EAAkD;AAC9C;AACH;;AACDF,UAAAA,GAAG,CAACG,GAAJ,CAAQV,MAAM,CAACG,EAAf,EAAmBH,MAAM,CAACI,SAAP,CAAiBE,SAAjB,CAAnB;AACH;AAPiC;AAAA;AAAA;AAAA;AAAA;;AAQlC,aAAOC,GAAP;AACH;;;gCACkBI,O,EAASC,a,EAAe;AAAA,kDAClBjB,OADkB;AAAA;;AAAA;AACvC,+DAA8B;AAAA,cAAnBK,MAAmB;AAC1BA,UAAAA,MAAM,CAACa,WAAP,CAAmBF,OAAnB,EAA4BC,aAA5B;AACH;AAHsC;AAAA;AAAA;AAAA;AAAA;AAI1C;;;8BACgBE,M,EAAQ;AACrB,aAAOlB,OAAO,CAACmB,GAAR,CAAYD,MAAZ,CAAP;AACH;;;8BACgBE,S,EAAWL,O,EAAS;AACjC,UAAI,CAACjB,OAAO,CAACuB,SAAR,CAAkBD,SAAlB,CAAL,EAAmC;AAC/BpB,QAAAA,OAAO,CAACc,GAAR,CAAYM,SAAZ,EAAuBL,OAAvB;AACH;AACJ;;;mCACqBO,I,EAAMC,M,EAAQ;AAChC,UAAI,CAACzB,OAAO,CAAC0B,cAAR,CAAuBF,IAAvB,CAAL,EAAmC;AAC/BpB,QAAAA,OAAO,CAACY,GAAR,CAAYQ,IAAZ,EAAkBC,MAAlB;AACH;AACJ;;;mCACqBD,I,EAAM;AACxB,aAAOpB,OAAO,CAACiB,GAAR,CAAYG,IAAZ,CAAP;AACH;;;yCAC2B;AACxB,aAAOpB,OAAO,CAACuB,IAAR,EAAP;AACH;;;qCACuBH,I,EAAM;AAC1B,aAAOnB,cAAc,CAACgB,GAAf,CAAmBG,IAAnB,CAAP;AACH;;;qCACuBA,I,EAAMI,a,EAAe;AACzC,UAAI,CAAC5B,OAAO,CAAC6B,gBAAR,CAAyBL,IAAzB,CAAL,EAAqC;AACjCnB,QAAAA,cAAc,CAACW,GAAf,CAAmBQ,IAAnB,EAAyBI,aAAzB;AACH;AACJ;;;;;;AAEL9B,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nconst plugins = [];\nconst presets = new Map();\nconst drawers = new Map();\nconst pathGenerators = new Map();\nclass Plugins {\n    static getPlugin(plugin) {\n        return plugins.find((t) => t.id === plugin);\n    }\n    static addPlugin(plugin) {\n        if (!Plugins.getPlugin(plugin.id)) {\n            plugins.push(plugin);\n        }\n    }\n    static getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of plugins) {\n            if (!plugin.needsPlugin(container.actualOptions)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    static loadOptions(options, sourceOptions) {\n        for (const plugin of plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    static getPreset(preset) {\n        return presets.get(preset);\n    }\n    static addPreset(presetKey, options) {\n        if (!Plugins.getPreset(presetKey)) {\n            presets.set(presetKey, options);\n        }\n    }\n    static addShapeDrawer(type, drawer) {\n        if (!Plugins.getShapeDrawer(type)) {\n            drawers.set(type, drawer);\n        }\n    }\n    static getShapeDrawer(type) {\n        return drawers.get(type);\n    }\n    static getSupportedShapes() {\n        return drawers.keys();\n    }\n    static getPathGenerator(type) {\n        return pathGenerators.get(type);\n    }\n    static addPathGenerator(type, pathGenerator) {\n        if (!Plugins.getPathGenerator(type)) {\n            pathGenerators.set(type, pathGenerator);\n        }\n    }\n}\nexports.Plugins = Plugins;\n"]},"metadata":{},"sourceType":"script"}