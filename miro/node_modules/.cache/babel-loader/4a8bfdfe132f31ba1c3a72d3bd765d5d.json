{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\n\nfunction bounceHorizontal(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\") {\n    var velocity = data.particle.velocity.x;\n    var bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n      var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n      data.particle.velocity.x *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      var minPos = data.offset.x + data.size;\n\n      if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n      } else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n      }\n    }\n  }\n}\n\nfunction bounceVertical(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\") {\n    var velocity = data.particle.velocity.y;\n    var bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      var newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n      data.particle.velocity.y *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      var minPos = data.offset.y + data.size;\n\n      if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n      } else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n      }\n    }\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n\n      this.updateLife(delta);\n\n      if (this.particle.destroyed || this.particle.spawning) {\n        return;\n      }\n\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutModes(delta);\n    }\n  }, {\n    key: \"updateLife\",\n    value: function updateLife(delta) {\n      var particle = this.particle;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        particle.lifeDelayTime += delta.value;\n\n        if (particle.lifeDelayTime >= particle.lifeDelay) {\n          justSpawned = true;\n          particle.spawning = false;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n        }\n      }\n\n      if (particle.lifeDuration === -1) {\n        return;\n      }\n\n      if (!particle.spawning) {\n        if (justSpawned) {\n          particle.lifeTime = 0;\n        } else {\n          particle.lifeTime += delta.value;\n        }\n\n        if (particle.lifeTime >= particle.lifeDuration) {\n          particle.lifeTime = 0;\n\n          if (particle.livesRemaining > 0) {\n            particle.livesRemaining--;\n          }\n\n          if (particle.livesRemaining === 0) {\n            particle.destroy();\n            return;\n          }\n\n          var canvasSize = this.container.canvas.size;\n          particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n          particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n          particle.spawning = true;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n          particle.reset();\n          var lifeOptions = particle.options.life;\n          particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n          particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n        }\n      }\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var opacityOpt = particle.options.opacity;\n      var opacityAnim = opacityOpt.animation;\n      var minValue = Utils_1.NumberUtils.getRangeMin(opacityOpt.value);\n      var maxValue = Utils_1.NumberUtils.getRangeMax(opacityOpt.value);\n\n      if (!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.size < opacityAnim.count)) {\n        switch (particle.opacity.status) {\n          case Enums_1.AnimationStatus.increasing:\n            if (particle.opacity.value >= maxValue) {\n              particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n              particle.loops.opacity++;\n            } else {\n              particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n            if (particle.opacity.value <= minValue) {\n              particle.opacity.status = Enums_1.AnimationStatus.increasing;\n              particle.loops.opacity++;\n            } else {\n              particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n            }\n\n            break;\n        }\n\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n        if (!particle.destroyed) {\n          particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n        }\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a;\n\n      var container = this.container;\n      var particle = this.particle;\n      var sizeOpt = particle.options.size;\n      var sizeAnim = sizeOpt.animation;\n      var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var minValue = Utils_1.NumberUtils.getRangeMin(sizeOpt.value) * container.retina.pixelRatio;\n      var maxValue = Utils_1.NumberUtils.getRangeMax(sizeOpt.value) * container.retina.pixelRatio;\n\n      if (!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count)) {\n        switch (particle.size.status) {\n          case Enums_1.AnimationStatus.increasing:\n            if (particle.size.value >= maxValue) {\n              particle.size.status = Enums_1.AnimationStatus.decreasing;\n              particle.loops.size++;\n            } else {\n              particle.size.value += sizeVelocity;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n            if (particle.size.value <= minValue) {\n              particle.size.status = Enums_1.AnimationStatus.increasing;\n              particle.loops.size++;\n            } else {\n              particle.size.value -= sizeVelocity;\n            }\n\n        }\n\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n        if (!particle.destroyed) {\n          particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n        }\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var rotate = particle.options.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (rotateAnimation.enable) {\n        switch (particle.rotate.status) {\n          case Enums_1.AnimationStatus.increasing:\n            particle.rotate.value += speed;\n\n            if (particle.rotate.value > max) {\n              particle.rotate.value -= max;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n          default:\n            particle.rotate.value -= speed;\n\n            if (particle.rotate.value < 0) {\n              particle.rotate.value += max;\n            }\n\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var _a, _b, _c;\n\n      var particle = this.particle;\n      var animationOptions = particle.options.color.animation;\n\n      if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n      }\n\n      if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n      }\n\n      if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n        this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n      var particle = this.particle;\n\n      if (!particle.stroke.color) {\n        return;\n      }\n\n      var animationOptions = particle.stroke.color.animation;\n      var valueAnimations = animationOptions;\n\n      if (valueAnimations.enable !== undefined) {\n        var hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n\n        if (hue) {\n          this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n        }\n      } else {\n        var hslAnimations = animationOptions;\n        var h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n\n        if (h) {\n          this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n        }\n\n        var s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n\n        if (s) {\n          this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n        }\n\n        var l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n\n        if (l) {\n          this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n        }\n      }\n    }\n  }, {\n    key: \"updateColorValue\",\n    value: function updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n      var _a;\n\n      var colorValue = value;\n\n      if (!colorValue || !valueAnimation.enable) {\n        return;\n      }\n\n      var offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n      var velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n\n      if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n        colorValue.value += velocity;\n\n        if (decrease && colorValue.value > max) {\n          colorValue.status = Enums_1.AnimationStatus.decreasing;\n          colorValue.value -= colorValue.value % max;\n        }\n      } else {\n        colorValue.value -= velocity;\n\n        if (colorValue.value < 0) {\n          colorValue.status = Enums_1.AnimationStatus.increasing;\n          colorValue.value += colorValue.value;\n        }\n      }\n\n      if (colorValue.value > max) {\n        colorValue.value %= max;\n      }\n    }\n  }, {\n    key: \"updateOutModes\",\n    value: function updateOutModes(delta) {\n      var _a, _b, _c, _d;\n\n      var outModes = this.particle.options.move.outModes;\n      this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n      this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n      this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n      this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta, outMode, direction) {\n      var container = this.container;\n      var particle = this.particle;\n\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n          this.updateBounce(delta, direction, outMode);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            container.particles.remove(particle);\n          }\n\n          break;\n\n        case Enums_1.OutMode.out:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            this.fixOutOfCanvasPosition(direction);\n          }\n\n          break;\n\n        case Enums_1.OutMode.none:\n          this.bounceNone(direction);\n          break;\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition(direction) {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.options.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      };\n      var sizeValue = particle.getRadius();\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta, direction, outMode) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"bounceNone\",\n    value: function bounceNone(direction) {\n      var particle = this.particle;\n\n      if (particle.options.move.distance) {\n        return;\n      }\n\n      var gravityOptions = particle.options.move.gravity;\n      var container = this.container;\n\n      if (!gravityOptions.enable) {\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n\n        if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === OutModeDirection_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/ardeeter/miroPortfolio/themeforest-CwQrfjdB-reactjs-creative-personal-portfolio-template-miro/miro/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","OutModeDirection_1","bounceHorizontal","data","outMode","OutMode","bounce","velocity","particle","x","bounced","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","options","horizontal","minPos","offset","size","position","bounceVertical","y","bottom","height","top","vertical","checkDestroy","destroy","minValue","maxValue","DestroyType","max","min","container","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","setRangeValue","reset","lifeOptions","life","delay","duration","_a","_b","opacityOpt","opacity","opacityAnim","animation","getRangeMin","getRangeMax","enable","count","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","retina","pixelRatio","rotate","rotateAnimation","speed","Math","PI","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugins","plugin","particleBounce","pos","getPosition","distance","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction bounceHorizontal(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\") {\n        const velocity = data.particle.velocity.x;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.horizontal);\n            data.particle.velocity.x *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.x + data.size;\n            if (data.bounds.right >= data.canvasSize.width) {\n                data.particle.position.x = data.canvasSize.width - minPos;\n            }\n            else if (data.bounds.left <= 0) {\n                data.particle.position.x = minPos;\n            }\n        }\n    }\n}\nfunction bounceVertical(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\") {\n        const velocity = data.particle.velocity.y;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.bottom &&\n            data.bounds.bottom >= data.canvasSize.height &&\n            velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.options.bounce.vertical);\n            data.particle.velocity.y *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.y + data.size;\n            if (data.bounds.bottom >= data.canvasSize.height) {\n                data.particle.position.y = data.canvasSize.height - minPos;\n            }\n            else if (data.bounds.top <= 0) {\n                data.particle.position.y = minPos;\n            }\n        }\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (!particle.spawning) {\n            if (justSpawned) {\n                particle.lifeTime = 0;\n            }\n            else {\n                particle.lifeTime += delta.value;\n            }\n            if (particle.lifeTime >= particle.lifeDuration) {\n                particle.lifeTime = 0;\n                if (particle.livesRemaining > 0) {\n                    particle.livesRemaining--;\n                }\n                if (particle.livesRemaining === 0) {\n                    particle.destroy();\n                    return;\n                }\n                const canvasSize = this.container.canvas.size;\n                particle.position.x = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.width));\n                particle.position.y = Utils_1.NumberUtils.randomInRange(Utils_1.NumberUtils.setRangeValue(0, canvasSize.height));\n                particle.spawning = true;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n                particle.reset();\n                const lifeOptions = particle.options.life;\n                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n            }\n        }\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = Utils_1.NumberUtils.getRangeMin(opacityOpt.value);\n        const maxValue = Utils_1.NumberUtils.getRangeMax(opacityOpt.value);\n        if (!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.size < opacityAnim.count)) {\n            switch (particle.opacity.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.opacity.value >= maxValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                        particle.loops.opacity++;\n                    }\n                    else {\n                        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.opacity.value <= minValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                        particle.loops.opacity++;\n                    }\n                    else {\n                        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                    }\n                    break;\n            }\n            checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n            }\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const container = this.container;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = Utils_1.NumberUtils.getRangeMin(sizeOpt.value) * container.retina.pixelRatio;\n        const maxValue = Utils_1.NumberUtils.getRangeMax(sizeOpt.value) * container.retina.pixelRatio;\n        if (!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count)) {\n            switch (particle.size.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.size.value >= maxValue) {\n                        particle.size.status = Enums_1.AnimationStatus.decreasing;\n                        particle.loops.size++;\n                    }\n                    else {\n                        particle.size.value += sizeVelocity;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.size.value <= minValue) {\n                        particle.size.status = Enums_1.AnimationStatus.increasing;\n                        particle.loops.size++;\n                    }\n                    else {\n                        particle.size.value -= sizeVelocity;\n                    }\n            }\n            checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n            }\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (rotateAnimation.enable) {\n            switch (particle.rotate.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    particle.rotate.value += speed;\n                    if (particle.rotate.value > max) {\n                        particle.rotate.value -= max;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                default:\n                    particle.rotate.value -= speed;\n                    if (particle.rotate.value < 0) {\n                        particle.rotate.value += max;\n                    }\n                    break;\n            }\n        }\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.NumberUtils.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.options.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === OutModeDirection_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}